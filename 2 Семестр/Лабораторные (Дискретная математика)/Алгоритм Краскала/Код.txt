using System;
using System.Collections.Generic;

class App
{
    // структура ребра графа (ребро состоит из начала, конца и веса)
    public struct Rib : IComparable<Rib>
    {
        public int Start { get; set; }
        public int End { get; set; }
        public int Weight { get; set; }

        // сортировка ребёр с помощью интерфейса Icomparable (вместо сортировки, просто используем стандартную сортировку для листа)
        public int CompareTo(Rib Ribs)
        {
            return this.Weight.CompareTo(Ribs.Weight);
        }
    }

    // отдельный класс для системы непересекающихся множеств
    class DisjointSet // каждое множество - отдельный граф со своим списком вершин
    {
        private int[] parent;
        private int[] rank;

        public DisjointSet(int size) // инициализируем множество
        {
            parent = new int[size];
            rank = new int[size];

            for (int i = 0; i < size; i++)
            {
                parent[i] = i;
                rank[i] = 0;
            }
        }
        public int Find(int x) // а есть ли вообще такая вершина ?
        {
            if (parent[x] != x)
            {
                parent[x] = Find(parent[x]); 
            }
            return parent[x];
        }

        public void Union(int x, int y) // соединяем множества по соединяющей вершине (вершине-родителю)
        {
            int rootX = Find(x);
            int rootY = Find(y);

            if (rootX != rootY)
            {
                // Union by rank
                if (rank[rootX] > rank[rootY])
                {
                    parent[rootY] = rootX;
                }
                else if (rank[rootX] < rank[rootY])
                {
                    parent[rootX] = rootY;
                }
                else
                {
                    parent[rootY] = rootX;
                    rank[rootX]++;
                }
            }
        }
    }

    // сам алгоритм
    public static List<Rib> Kruskal(int[,] adjacencyMatrix, int[,] weightMatrix) // в качестве аргументов - две матрицы
    {
        int vertices = adjacencyMatrix.GetLength(0); // вершины матрицы смежности, по которой производится вычисление
        List<Rib> edges = new List<Rib>(); // список рёбер

        // берём все рёбра из матрицы смежности и весовой матрицы
        for (int i = 0; i < vertices; i++)
        {
            for (int j = 0; j < vertices; j++)
            {
                if (adjacencyMatrix[i, j] == 1 && i < j) // учитываем только верхний "треугольник" матрицы
                {
                    edges.Add(new Rib { Start = i, End = j, Weight = weightMatrix[i, j] });
                }
            }
        }

        // сортировка ребёр по весу

        edges.Sort();
         
        DisjointSet Ds = new DisjointSet(vertices); // инициализация снм

        List<Rib> minTree = new List<Rib>(); // то, что будет результатом, то есть мин. оставное дерево

        foreach (var edge in edges)
        {
            int rootSource = Ds.Find(edge.Start);
            int rootDest = Ds.Find(edge.End);

            // если добавление ребра не создаёт цикл
            if (rootSource != rootDest)
            {
                minTree.Add(edge);
                Ds.Union(rootSource, rootDest);
            }
        }

        return minTree;
    }

    static void Main()
    {
        // код для создания весовой матрицы + сразу делаем копию матрицы смежности

        Console.WriteLine("Введите размер матрицы (Матрица будет обработана до симметричной, начиная с 1 строки):");
        var n = Convert.ToInt32(Console.ReadLine());
        int[,] TheMainMatrix = new int[n, n];
        int[,] TheWeightMatrix = new int[n, n];

        int countForElements = 1; // счётчик для строк
        for (int i = 0; i < n; i++)
        {
            Console.WriteLine($"Введите элементы {countForElements} строки:");
            for (int j = 0; j < n; j++)
            {
                TheWeightMatrix[i, j] = Convert.ToInt32(Console.ReadLine());
                if (TheWeightMatrix[i, j] != 0)
                {
                    TheMainMatrix[i, j] = 1;
                }
                else
                {
                    TheMainMatrix[i, j] = 0;
                }
            }
            countForElements++;
        }
        Console.WriteLine();
        // обработка матрицы для того, чтобы она была симметричной (смежности)
        int count = 0; // базовый счётчик
        for (int i = 0; i < n; i++)
        {
            TheMainMatrix[i, i] = 0; // на главной диагонале все нули
        }
        for (int i = 0; i < n; i++) // придание матрице симметричности начиная с 1ой строки
        {
            count = i;
            while (count < n)
            {
                if (TheMainMatrix[i, count] == 0)
                {
                    TheMainMatrix[count, i] = 0;
                }
                else if (TheMainMatrix[i, count] == 1)
                {
                    TheMainMatrix[count, i] = 1;
                }
                count++;
            }

        }

        // обработка матрицы для того, чтобы она была симметричной (весовая)
        count = 0; 
        for (int i = 0; i < n; i++)
        {
            TheWeightMatrix[i, i] = 0; // на главной диагонале все нули
        }
        for (int i = 0; i < n; i++) // придание матрице симметричности начиная с 1ой строки
        {
            count = i;
            while (count < n)
            {
                if (TheWeightMatrix[i, count] == 0)
                {
                    TheWeightMatrix[count, i] = 0;
                }
                else if (TheWeightMatrix[i, count] != 0)
                {
                    TheWeightMatrix[count, i] = TheWeightMatrix[i, count];
                }
                count++;
            }

        }

        List<Rib> MinTree = Kruskal(TheMainMatrix, TheWeightMatrix); // вызов Краскала

        Console.WriteLine("Ответ (рёбра из которых состоит минимальное остовное дерево):");
        foreach (var rib in MinTree)
        {
            Console.WriteLine($"{rib.Start}, {rib.End}");
        }
    }
}